// 크기가 작은 부분 문자열
// 문자열을 다루기
// https://school.programmers.co.kr/learn/courses/30/lessons/147355

function solution(t, p) {
    const arr = []
    for (let i = 0; i < t.length; i++){
        let newT = t[i]
        for (let j = 1; j < p.length; j++){
            if (t[i + j] !== undefined){
                newT = newT + t[i + j] 
            }
        }
        if (newT.length === p.length){
            arr.push(newT)    
        }
        
    }
    let answer = 0
    arr.forEach((v) => {
        if (v <= p){
            answer += 1
        }
    })
    return answer
}

// 테스트 1 〉	통과 (32.01ms, 37.5MB)
// 테스트 2 〉	통과 (27.91ms, 37.5MB)
// 테스트 3 〉	통과 (1.17ms, 33.6MB)
// 테스트 4 〉	통과 (27.29ms, 37.2MB)
// 테스트 5 〉	통과 (4.48ms, 37.5MB)
// 테스트 6 〉	통과 (28.46ms, 36.7MB)
// 테스트 7 〉	통과 (29.13ms, 38.2MB)
// 테스트 8 〉	통과 (25.33ms, 37.2MB)
// 테스트 9 〉	통과 (4.12ms, 37.1MB)
// 테스트 10 〉	통과 (0.20ms, 33.4MB)
// 테스트 11 〉	통과 (4.81ms, 37.7MB)
// 테스트 12 〉	통과 (6.98ms, 38.2MB)
// 테스트 13 〉	통과 (7.16ms, 38.1MB)
// 테스트 14 〉	통과 (4.82ms, 37.7MB)
// 테스트 15 〉	통과 (4.52ms, 37.5MB)
// 테스트 16 〉	통과 (4.66ms, 37.7MB)
// 테스트 17 〉	통과 (5.87ms, 38MB)
// 테스트 18 〉	통과 (4.53ms, 37.4MB)
// 테스트 19 〉	통과 (0.58ms, 33.5MB)
// 테스트 20 〉	통과 (0.59ms, 33.6MB)
// 테스트 21 〉	통과 (0.18ms, 33.4MB)
// 테스트 22 〉	통과 (0.49ms, 33.6MB)
// 테스트 23 〉	통과 (4.10ms, 37.2MB)
// 테스트 24 〉	통과 (0.20ms, 33.4MB)
// 테스트 25 〉	통과 (0.24ms, 33.4MB)
// 테스트 26 〉	통과 (0.19ms, 33.3MB)
// 테스트 27 〉	통과 (0.19ms, 33.3MB)
// 테스트 28 〉	통과 (0.18ms, 33.4MB)
// 테스트 29 〉	통과 (0.18ms, 33.4MB)
// 테스트 30 〉	통과 (0.74ms, 33.6MB)
// 테스트 31 〉	통과 (0.07ms, 33.4MB)
// 테스트 32 〉	통과 (0.10ms, 33.3MB)
// 테스트 33 〉	통과 (0.16ms, 33.4MB)
// 테스트 34 〉	통과 (0.23ms, 33.4MB)
// 테스트 35 〉	통과 (0.18ms, 33.4MB)
// 테스트 36 〉	통과 (0.18ms, 33.4MB)
// 테스트 37 〉	통과 (0.07ms, 33.3MB)
// 테스트 38 〉	통과 (0.18ms, 33.4MB)

// 개선 후
function solution(t, p) {
    const pLen = p.length;
    const targetNum = Number(p);
    let answer = 0;
    
    for (let i = 0; i <= t.length - pLen; i++) {
        const subStr = t.slice(i, i + pLen);  // 부분 문자열 추출
        const subNum = Number(subStr);  // 숫자로 변환
        
        if (subNum <= targetNum) {
            answer += 1;
        }
    }
    
    return answer;
}

// 테스트 1 〉	통과 (0.44ms, 33.5MB)
// 테스트 2 〉	통과 (0.95ms, 33.6MB)
// 테스트 3 〉	통과 (0.59ms, 33.4MB)
// 테스트 4 〉	통과 (0.55ms, 33.4MB)
// 테스트 5 〉	통과 (0.42ms, 33.5MB)
// 테스트 6 〉	통과 (2.25ms, 36.6MB)
// 테스트 7 〉	통과 (1.54ms, 33.9MB)
// 테스트 8 〉	통과 (0.80ms, 33.6MB)
// 테스트 9 〉	통과 (0.29ms, 33.6MB)
// 테스트 10 〉	통과 (0.14ms, 33.4MB)
// 테스트 11 〉	통과 (0.65ms, 33.6MB)
// 테스트 12 〉	통과 (1.52ms, 34MB)
// 테스트 13 〉	통과 (1.01ms, 33.6MB)
// 테스트 14 〉	통과 (0.65ms, 33.6MB)
// 테스트 15 〉	통과 (0.64ms, 33.5MB)
// 테스트 16 〉	통과 (0.57ms, 33.5MB)
// 테스트 17 〉	통과 (1.20ms, 33.7MB)
// 테스트 18 〉	통과 (0.96ms, 33.7MB)
// 테스트 19 〉	통과 (0.31ms, 33.5MB)
// 테스트 20 〉	통과 (0.28ms, 33.5MB)
// 테스트 21 〉	통과 (0.12ms, 33.3MB)
// 테스트 22 〉	통과 (0.17ms, 33.4MB)
// 테스트 23 〉	통과 (0.28ms, 33.4MB)
// 테스트 24 〉	통과 (0.15ms, 33.5MB)
// 테스트 25 〉	통과 (0.13ms, 33.4MB)
// 테스트 26 〉	통과 (0.13ms, 33.3MB)
// 테스트 27 〉	통과 (0.13ms, 33.4MB)
// 테스트 28 〉	통과 (0.13ms, 33.5MB)
// 테스트 29 〉	통과 (0.13ms, 33.1MB)
// 테스트 30 〉	통과 (0.24ms, 33MB)
// 테스트 31 〉	통과 (0.04ms, 33.5MB)
// 테스트 32 〉	통과 (0.04ms, 33.4MB)
// 테스트 33 〉	통과 (0.05ms, 33.1MB)
// 테스트 34 〉	통과 (0.12ms, 33.1MB)
// 테스트 35 〉	통과 (0.12ms, 33.3MB)
// 테스트 36 〉	통과 (0.12ms, 33.4MB)
// 테스트 37 〉	통과 (0.12ms, 33.4MB)
// 테스트 38 〉	통과 (0.12ms, 33.4MB)
